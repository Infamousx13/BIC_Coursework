{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "02b23228",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best solution found at position: [2.67788062 3.91814364]\n",
      "Objective function value at the best position: 0.0020705153503380296\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import math\n",
    "import random\n",
    "\n",
    "# Define the objective function (Sphere function)\n",
    "def sphere_function(x):\n",
    "    return np.sum(x**2)\n",
    "\n",
    "# Define the PSO parameters\n",
    "num_variables = 4\n",
    "num_particles = 30  # Number of particles in the swarm\n",
    "max_iterations = 1000  # Maximum number of iterations\n",
    "dimensions = 2  # Number of dimensions in the search space\n",
    "search_space_low = -5  # Lower boundary of the search space\n",
    "search_space_high = 5  # Upper boundary of the search space\n",
    "w = 0.9  # Inertia weight\n",
    "c1 = 1  # Cognitive parameter\n",
    "c2 = 2  # Social parameter\n",
    "num_informants = 5  # Number of informants for each particle\n",
    "\n",
    "# Initialize particles\n",
    "positions = np.random.uniform(search_space_low, search_space_high, size=(num_particles, dimensions))\n",
    "velocities = np.random.rand(num_particles, dimensions)\n",
    "\n",
    "# Initialize personal best and global best\n",
    "pbest_positions = positions.copy()\n",
    "pbest_values = np.zeros(num_particles)\n",
    "gbest_position = np.zeros(dimensions)\n",
    "gbest_value = np.inf\n",
    "\n",
    "# Randomly allocate informants for each particle\n",
    "informants = np.random.choice(num_particles, size=(num_particles, num_informants), replace=True)\n",
    "\n",
    "# PSO iterations\n",
    "for i in range(max_iterations):\n",
    "    for p in range(num_particles):\n",
    "        # Update particle's velocity and position\n",
    "        r1, r2 = np.random.rand(), np.random.rand()\n",
    "        cognitive = c1 * r1 * (pbest_positions[p] - positions[p])\n",
    "        social = c2 * r2 * (gbest_position - positions[p])\n",
    "        velocities[p] = w * velocities[p] + cognitive + social\n",
    "        positions[p] = positions[p] + velocities[p]\n",
    "\n",
    "        # Evaluate the objective function at the new position\n",
    "        current_value = sphere_function(positions[p])\n",
    "\n",
    "        # Update personal best\n",
    "        if current_value < pbest_values[p]:\n",
    "            pbest_values[p] = current_value\n",
    "            pbest_positions[p] = positions[p]\n",
    "\n",
    "        # Update global best\n",
    "        if current_value < gbest_value:\n",
    "            gbest_value = current_value\n",
    "            gbest_position = positions[p]\n",
    "\n",
    "# Print the results\n",
    "print(\"Best solution found at position:\", gbest_position)\n",
    "print(\"Objective function value at the best position:\", gbest_value)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5990d421",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
